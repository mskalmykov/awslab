---
- name: Create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ vpc_region }}"
  register: vpc

- name: Create left subnet
  ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ subnet_left_cidr }}"
    az: "{{ subnet_left_az }}"
    tags:
      Name: "{{ subnet_left_name }}"
  register: subnet_left

- name: Create right subnet
  ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ subnet_right_cidr }}"
    az: "{{ subnet_right_az }}"
    tags:
      Name: "{{ subnet_right_name }}"
  register: subnet_right

- name: Create Internet gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      Name: "{{ igw_name }}"
  register: igw

- name: Create route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ vpc_region }}"
    subnets:
      - "{{ subnet_left.subnet.id }}"
      - "{{ subnet_right.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    tags:
      Name: "{{ route_table_name }}"
  register: route_table

- name: Create security group
  ec2_group:
    name: "{{ security_group_name }}"
    description: Security group for WP servers
    vpc_id: "{{ vpc.vpc.id }}"
    rules:
      - { proto: icmp, ports: -1, group_name: "{{ security_group_name }}" }
      - { proto: tcp, ports: 22,  cidr_ip: 0.0.0.0/0 }
      - { proto: tcp, ports: 80,  cidr_ip: 0.0.0.0/0 }
      - { proto: tcp, ports: 443, cidr_ip: 0.0.0.0/0 }
    tags:
      Name: "{{ security_group_name }}"
  register: security_group

- name: Create EC2 keypair
  ec2_key:
    name: "{{ ssh_key_name }}"
    region: "{{ vpc_region }}"
  register: ssh_key

- name: Save private key (if generated)
  copy:
    content: "{{ ssh_key.key.private_key }}"
    dest: ssh-key.pem
    mode: 0600
  when: ssh_key.key.private_key is defined

- name: Create EC2 instance for the left subnet
  ec2_instance:
    name: "{{ ec2_instance_left_name }}"
    key_name: "{{ ssh_key_name }}"
    region: "{{ vpc_region }}"
    vpc_subnet_id: "{{ subnet_left.subnet.id }}"
    instance_type: "{{ ec2_instance_type }}"
    security_group: "{{ security_group.group_id }}"
    network:
      assign_public_ip: true
    image_id: "{{ ec2_instance_ami }}"
    state: running
  register: ec2_instance_left

- name: Create EC2 instance for the right subnet
  ec2_instance:
    name: "{{ ec2_instance_right_name }}"
    key_name: "{{ ssh_key_name }}"
    region: "{{ vpc_region }}"
    vpc_subnet_id: "{{ subnet_right.subnet.id }}"
    instance_type: "{{ ec2_instance_type }}"
    security_group: "{{ security_group.group_id }}"
    network:
      assign_public_ip: true
    image_id: "{{ ec2_instance_ami }}"
    state: running
  register: ec2_instance_right

- debug: 
    msg: "Public IPs: {{ ec2_instance_left.instances[0].public_ip_address }} and {{ ec2_instance_right.instances[0].public_ip_address }}"


